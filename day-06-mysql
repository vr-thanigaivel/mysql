Joins 
1. Employees Table
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department_id INT,
    salary INT
);

INSERT INTO Employees (emp_id, name, department_id, salary) VALUES
(1, 'Alice', 101, 60000),
(2, 'Bob', 102, 55000),
(3, 'Charlie', 101, 70000),
(4, 'David', 103, 48000),
(5, 'Eve', NULL, 75000),
(6, 'Frank', 104, 52000),
(7, 'Grace', 102, 58000),
(8, 'Hannah', NULL, 62000);
________________________________________
🧱 2. Departments Table
CREATE TABLE Departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50),
    location VARCHAR(50)
);

INSERT INTO Departments (department_id, department_name, location) VALUES
(101, 'HR', 'New York'),
(102, 'IT', 'San Francisco'),
(103, 'Finance', 'Chicago'),
(104, 'Sales', 'Boston'),
(105, 'Marketing', 'Los Angeles');
________________________________________
🔍 20 Hands-on SQL JOIN Questions
________________________________________
🔹 INNER JOIN
1.	List all employees along with their department names.
select e.*,department_name from employees as e inner join departments on departments.department_id = e.department_id;
+--------+---------+---------------+--------+-----------------+
| emp_id | name    | department_id | salary | department_name |
+--------+---------+---------------+--------+-----------------+
|      1 | Alice   |           101 |  60000 | HR              |
|      2 | Bob     |           102 |  55000 | IT              |
|      3 | Charlie |           101 |  70000 | HR              |
|      4 | David   |           103 |  48000 | Finance         |
|      6 | Frank   |           104 |  52000 | Sales           |
|      7 | Grace   |           102 |  58000 | IT              |
+--------+---------+---------------+--------+-----------------+
2.	Show the names of employees who work in the IT department.
select e.*,department_name from employees as e inner join departments on departments.department_id = e.department_id where department_name = 'it';
+--------+-------+---------------+--------+-----------------+
| emp_id | name  | department_id | salary | department_name |
+--------+-------+---------------+--------+-----------------+
|      2 | Bob   |           102 |  55000 | IT              |
|      7 | Grace |           102 |  58000 | IT              |
+--------+-------+---------------+--------+-----------------+
3.	Get the names and locations of departments where at least one employee works.
select employees.name,departments.location,departments.department_name from employees inner join departments on departments.department_id = employees.department_id ;
+---------+---------------+-----------------+
| name    | location      | department_name |
+---------+---------------+-----------------+
| Alice   | New York      | HR              |
| Bob     | San Francisco | IT              |
| Charlie | New York      | HR              |
| David   | Chicago       | Finance         |
| Frank   | Boston        | Sales           |
| Grace   | San Francisco | IT              |
+---------+---------------+-----------------+
4.	Find employees who work in the same location as the 'HR' department.
select employees.name,departments.location from employees inner join departments on departments.department_id = employees.department_id where location = any(select location from departments where department_name = 'hr');
+---------+----------+
| name    | location |
+---------+----------+
| Alice   | New York |
| Charlie | New York |
+---------+----------+
5.	List department names and employee count (only departments with employees).
SELECT d.department_name, COUNT(e.emp_id) AS employee_count
    -> FROM Departments d
    -> JOIN Employees e ON d.department_id = e.department_id
    -> GROUP BY d.department_name;
+-----------------+----------------+
| department_name | employee_count |
+-----------------+----------------+
| HR              |              2 |
| IT              |              2 |
| Finance         |              1 |
| Sales           |              1 |
+-----------------+----------------+
________________________________________
🔹 LEFT JOIN
6.	List all employees and their departments (even if they don’t belong to any department).
SELECT e.name, d.department_name
    -> FROM Employees e
    -> LEFT JOIN Departments d ON e.department_id = d.department_id;
+---------+-----------------+
| name    | department_name |
+---------+-----------------+
| Alice   | HR              |
| Bob     | IT              |
| Charlie | HR              |
| David   | Finance         |
| Eve     | NULL            |
| Frank   | Sales           |
| Grace   | IT              |
| Hannah  | NULL            |
+---------+-----------------+
7.	Find employees who are not assigned to any department.
> SELECT *
    -> FROM Employees
    -> WHERE department_id IS NULL;
+--------+--------+---------------+--------+
| emp_id | name   | department_id | salary |
+--------+--------+---------------+--------+
|      5 | Eve    |          NULL |  75000 |
|      8 | Hannah |          NULL |  62000 |
+--------+--------+---------------+--------+
8.	List all departments and the names of employees working in them (include departments without employees).
SELECT d.department_name, e.name
    -> FROM Departments d
    -> LEFT JOIN Employees e ON d.department_id = e.department_id;
+-----------------+---------+
| department_name | name    |
+-----------------+---------+
| HR              | Charlie |
| HR              | Alice   |
| IT              | Grace   |
| IT              | Bob     |
| Finance         | David   |
| Sales           | Frank   |
| Marketing       | NULL    |
| HR              | NULL    |
+-----------------+---------+
9.	Show employee names and department names, replacing NULLs with 'Unassigned'.
SELECT e.name,
    ->        COALESCE(d.department_name, 'Unassigned') AS department_name
    -> FROM Employees e
    -> LEFT JOIN Departments d ON e.department_id = d.department_id;
+---------+-----------------+
| name    | department_name |
+---------+-----------------+
| Alice   | HR              |
| Bob     | IT              |
| Charlie | HR              |
| David   | Finance         |
| Eve     | Unassigned      |
| Frank   | Sales           |
| Grace   | IT              |
| Hannah  | Unassigned      |
+---------+-----------------+
10.	Find departments where no employees are assigned.
SELECT d.*
    -> FROM Departments d
    -> LEFT JOIN Employees e ON d.department_id = e.department_id
    -> WHERE e.emp_id IS NULL;
+---------------+-----------------+-------------+
| department_id | department_name | location    |
+---------------+-----------------+-------------+
|           105 | Marketing       | Los Angeles |
|           106 | HR              | India       |
+---------------+-----------------+-------------+
________________________________________
🔹 RIGHT JOIN (use LEFT JOIN with reversed tables if using SQLite/MySQL)
11.	Show all departments and the employees working in them (even if no employees).
(Use RIGHT JOIN or flip the LEFT JOIN if not supported)
SELECT d.department_name, e.name
    -> FROM Departments d
    -> LEFT JOIN Employees e ON d.department_id = e.department_id;
+-----------------+---------+
| department_name | name    |
+-----------------+---------+
| HR              | Charlie |
| HR              | Alice   |
| IT              | Grace   |
| IT              | Bob     |
| Finance         | David   |
| Sales           | Frank   |
| Marketing       | NULL    |
| HR              | NULL    |
+-----------------+---------+
12.	List all employees and their department locations.
SELECT e.name, d.location
    -> FROM Employees e
    -> LEFT JOIN Departments d ON e.department_id = d.department_id;
+---------+---------------+
| name    | location      |
+---------+---------------+
| Alice   | New York      |
| Bob     | San Francisco |
| Charlie | New York      |
| David   | Chicago       |
| Eve     | NULL          |
| Frank   | Boston        |
| Grace   | San Francisco |
| Hannah  | NULL          |
+---------+---------------+
________________________________________
🔹 FULL OUTER JOIN (Emulated in MySQL using UNION of LEFT and RIGHT JOIN)
13.	List all employees and departments, even if they don't match.
(Helpful to find both unassigned employees and empty departments)
SELECT e.emp_id, e.name, d.department_id, d.department_name
    -> FROM Employees e
    -> LEFT JOIN Departments d ON e.department_id = d.department_id
    -> UNION
    -> SELECT e.emp_id, e.name, d.department_id, d.department_name
    -> FROM Departments d
    -> LEFT JOIN Employees e ON d.department_id = e.department_id;
+--------+---------+---------------+-----------------+
| emp_id | name    | department_id | department_name |
+--------+---------+---------------+-----------------+
|      1 | Alice   |           101 | HR              |
|      2 | Bob     |           102 | IT              |
|      3 | Charlie |           101 | HR              |
|      4 | David   |           103 | Finance         |
|      5 | Eve     |          NULL | NULL            |
|      6 | Frank   |           104 | Sales           |
|      7 | Grace   |           102 | IT              |
|      8 | Hannah  |          NULL | NULL            |
|   NULL | NULL    |           105 | Marketing       |
|   NULL | NULL    |           106 | HR              |
+--------+---------+---------------+-----------------+
14.	Show which employees or departments are missing a match.
SELECT e.name AS employee_name, d.department_name
    -> FROM Employees e
    -> LEFT JOIN Departments d ON e.department_id = d.department_id
    -> WHERE d.department_id IS NULL
    -> UNION
    -> SELECT e.name, d.department_name
    -> FROM Departments d
    -> LEFT JOIN Employees e ON d.department_id = e.department_id
    -> WHERE e.emp_id IS NULL;
+---------------+-----------------+
| employee_name | department_name |
+---------------+-----------------+
| Eve           | NULL            |
| Hannah        | NULL            |
| NULL          | Marketing       |
| NULL          | HR              |
+---------------+-----------------+
________________________________________
🔹 SELF JOIN
15.	Find all pairs of employees who work in the same department.
SELECT e1.name AS employee1, e2.name AS employee2, e1.department_id
    -> FROM Employees e1
    -> JOIN Employees e2
    ->   ON e1.department_id = e2.department_id
    -> WHERE e1.emp_id < e2.emp_id;
+-----------+-----------+---------------+
| employee1 | employee2 | department_id |
+-----------+-----------+---------------+
| Alice     | Charlie   |           101 |
| Bob       | Grace     |           102 |
+-----------+-----------+---------------+
16.	List employees along with their colleagues in the same department (exclude self).
SELECT e1.name AS employee, e2.name AS colleague
    -> FROM Employees e1
    -> JOIN Employees e2
    ->   ON e1.department_id = e2.department_id
    -> WHERE e1.emp_id <> e2.emp_id;
+----------+-----------+
| employee | colleague |
+----------+-----------+
| Charlie  | Alice     |
| Grace    | Bob       |
| Alice    | Charlie   |
| Bob      | Grace     |
+----------+-----------+
17.	Find all employee pairs where one earns more than the other.
SELECT e1.name AS higher_paid, e2.name AS lower_paid
    -> FROM Employees e1
    -> JOIN Employees e2
    ->   ON e1.salary > e2.salary;
+-------------+------------+
| higher_paid | lower_paid |
+-------------+------------+
| Hannah      | Alice      |
| Eve         | Alice      |
| Charlie     | Alice      |
| Hannah      | Bob        |
| Grace       | Bob        |
| Eve         | Bob        |
| Charlie     | Bob        |
| Alice       | Bob        |
| Eve         | Charlie    |
| Hannah      | David      |
| Grace       | David      |
| Frank       | David      |
| Eve         | David      |
| Charlie     | David      |
| Bob         | David      |
| Alice       | David      |
| Hannah      | Frank      |
| Grace       | Frank      |
| Eve         | Frank      |
| Charlie     | Frank      |
| Bob         | Frank      |
| Alice       | Frank      |
| Hannah      | Grace      |
| Eve         | Grace      |
| Charlie     | Grace      |
| Alice       | Grace      |
| Eve         | Hannah     |
| Charlie     | Hannah     |
+-------------+------------+
18.	List each employee with the name of the highest-paid person in their department.
SELECT e.name AS employee,
    ->        (SELECT e2.name
    ->         FROM Employees e2
    ->         WHERE e2.department_id = e.department_id
    ->         ORDER BY e2.salary DESC
    ->         LIMIT 1) AS highest_paid
    -> FROM Employees e;
+----------+--------------+
| employee | highest_paid |
+----------+--------------+
| Alice    | Charlie      |
| Bob      | Grace        |
| Charlie  | Charlie      |
| David    | David        |
| Eve      | NULL         |
| Frank    | Frank        |
| Grace    | Grace        |
| Hannah   | NULL         |
+----------+--------------+
________________________________________
🔹 CROSS JOIN
19.	List all possible employee-department combinations.
SELECT e.name, d.department_name
    -> FROM Employees e
    -> CROSS JOIN Departments d;
+---------+-----------------+
| name    | department_name |
+---------+-----------------+
| Alice   | HR              |
| Alice   | Marketing       |
| Alice   | Sales           |
| Alice   | Finance         |
| Alice   | IT              |
| Alice   | HR              |
| Bob     | HR              |
| Bob     | Marketing       |
| Bob     | Sales           |
| Bob     | Finance         |
| Bob     | IT              |
| Bob     | HR              |
| Charlie | HR              |
| Charlie | Marketing       |
| Charlie | Sales           |
| Charlie | Finance         |
| Charlie | IT              |
| Charlie | HR              |
| David   | HR              |
| David   | Marketing       |
| David   | Sales           |
| David   | Finance         |
| David   | IT              |
| David   | HR              |
| Eve     | HR              |
| Eve     | Marketing       |
| Eve     | Sales           |
| Eve     | Finance         |
| Eve     | IT              |
| Eve     | HR              |
| Frank   | HR              |
| Frank   | Marketing       |
| Frank   | Sales           |
| Frank   | Finance         |
| Frank   | IT              |
| Frank   | HR              |
| Grace   | HR              |
| Grace   | Marketing       |
| Grace   | Sales           |
| Grace   | Finance         |
| Grace   | IT              |
| Grace   | HR              |
| Hannah  | HR              |
| Hannah  | Marketing       |
| Hannah  | Sales           |
| Hannah  | Finance         |
| Hannah  | IT              |
| Hannah  | HR              |
+---------+-----------------+
20.	Count how many total combinations of employees and departments exist.
SELECT COUNT(*) AS total_combinations
    -> FROM Employees e
    -> CROSS JOIN Departments d;
+--------------------+
| total_combinations |
+--------------------+
|                 48 |
+--------------------+
